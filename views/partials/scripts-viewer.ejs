<!-- The Viewer JS -->
<script src="https://developer.api.autodesk.com/derivativeservice/v2/viewers/three.js?v=v3.3"></script>
<script src="https://developer.api.autodesk.com/derivativeservice/v2/viewers/viewer3D.js?v=v3.3"></script>

<!-- Load Model JS -->
<script>
  const token = '<%= token %>';
  const urn = 'dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6ZXh0cmFjdC1hdXRvZGVzay1pby0yMDE3bmVzYTJ3d3BpZXVqdm16enZocm1vN3ZwczdycWFxcGQvcm1lX2FkdmFuY2VkX3NhbXBsZV9wcm9qZWN0LnJ2dA';
  
  var viewerApp;
  function showModel(urn, token) {
    var options = {
      env: 'AutodeskProduction',
      accessToken: token

    };
    var documentId = 'urn:' + urn;
    Autodesk.Viewing.Initializer(options, function onInitialized() {
      viewerApp = new Autodesk.Viewing.ViewingApplication('viewer');
      viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D);
      viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);
    });
  }

  function onDocumentLoadSuccess(doc) {

    // We could still make use of Document.getSubItemsWithProperties()
    // However, when using a ViewingApplication, we have access to the **bubble** attribute,
    // which references the root node of a graph that wraps each object from the Manifest JSON.
    var viewables = viewerApp.bubble.search({ 'type': 'geometry' });
    if (viewables.length === 0) {
      alert('File not translated or not viewable');
      return;
    }

    // Choose any of the avialble viewables
    viewerApp.selectItem(viewables[0].data, onItemLoadSuccess, onItemLoadFail);
  }

  function onDocumentLoadFailure(viewerErrorCode) {
    alert('File not translated or not viewable');
    console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);
  }

  function onItemLoadSuccess(viewer, item) {
    console.log('onItemLoadSuccess()!');
    console.log(viewer);
    console.log(item);

    // Congratulations! The viewer is now ready to be used.
    console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));
  }

  function onItemLoadFail(errorCode) {
    console.error('onItemLoadFail() - errorCode:' + errorCode);
  }
  
  showModel(urn, token);
</script>